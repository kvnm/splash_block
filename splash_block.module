<?php

/**
 * Implements hook_permission()
 */
function splash_block_permission() {
  return array(
    'administer splash blocks' => array(
      'title' => t('Administer Splash Block settings'),
      'description' => t('Allows admins to set the time delay between splashes on a given block.'),
    ),
  );
}

/**
 * Implements hook_system_info_alter()
 *
 * Adds a new "splash" region to the current theme.
 */
function splash_block_system_info_alter(&$info, $file){
  global $custom_theme;    
 
  // If non-default theme configuration has been selected, set the custom theme.
  $custom_theme = isset ($theme) ? $theme : variable_get('theme_default', 'bartik');
 
  if ($file->name == $custom_theme){
    $info['regions'] = array_merge($info['regions'],  array('splash' => t('Splash')));
  } 
}

/**
 * Implements hook_form_alter()
 *
 * Alter block edit form to add configuration field.
 */
function splash_block_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer splash blocks') && ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {

    if (isset($form['delta']['#value'])) {
      $splash_block = _splash_block_get_settings($form['module']['#value'], $form['delta']['#value']);
    }

    $form['settings']['splash_block'] = array(
      '#type' => 'fieldset',
      '#title' => t('Splash Block Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['settings']['splash_block']['splash_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Splash Interval'),
      '#default_value' => isset($splash_block->time) ? $splash_block->time : '20160',
      '#description' => t('Time in minutes (whole integers) between splashes. 20160 minutes = 2 weeks.'),
      '#maxlength' => 255,
    );
    $form['settings']['splash_block']['splash_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Splash Width'),
      '#default_value' => isset($splash_block->size) ? $splash_block->size : '450',
      '#description' => t('Width (in pixels) of the splash block.'),
      '#maxlength' => 255,
    );

    $form['#validate'][] = 'splash_block_form_validate';
    $form['#submit'][] = 'splash_block_form_submit';
  }
}

/**
 * Catch poorly entered settings.
 */
function splash_block_form_validate($form, &$form_state) {
  if (empty($form_state['values']['splash_time'])) {
    form_set_error('splash_time', t('Please enter a value for your splash block\'s time interval.'));
  }
  if (empty($form_state['values']['splash_size'])) {
    form_set_error('splash_size', t('Please enter a value for your splash block\'s width.'));
  }
  if (!is_numeric($form_state['values']['splash_time'])) {
    form_set_error('splash_time', t('Time interval must be numeric.'));
  }
  if (!is_numeric($form_state['values']['splash_size'])) {
    form_set_error('splash_size', t('Time interval must be numeric.'));
  }
}

/**
 * Save splash settings.
 */
function splash_block_form_submit($form, &$form_state) {
  if (($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') && user_access('administer blocks')) {
    // Only save if at least one field has changed.
    // TODO --> make sure people can reset values to the defaults if they want!
    if (($form['settings']['splash_block']['splash_time']['#default_value'] != $form_state['values']['splash_time']) || ($form['settings']['splash_block']['splash_size']['#default_value'] != $form_state['values']['splash_size'])) {
      db_merge('splash_block')
        ->key(array('module' => $form_state['values']['module'], 'delta' => $form_state['values']['delta']))
        ->fields(array(
          'time' => $form_state['values']['splash_time'],
          'size' => $form_state['values']['splash_size']
          ))
        ->execute();

      // Flush all context module cache to use the updated splash settings.
      if (module_exists('context')) {
        cache_clear_all('context', 'cache', TRUE);
      }
    }
  }
}

/**
 * Returns saved settings for a given block.
 */
function _splash_block_get_settings($module, $delta) {
  $query = db_query('SELECT time, size FROM {splash_block} WHERE module = :module AND delta = :delta', 
    array(
      ':module' => $module,
      ':delta' => $delta,
    )
  );
  $splash_block = $query->fetchObject();

  return $splash_block;
}

/**
 * Implements hook_page_alter()
 *
 * Displays any blocks in splash region as lightbox popups.
 */
function splash_block_page_build(&$page) {

  if (!isset($page['splash'])) {
    return;
  }
  
  $path = drupal_get_path('module', 'splash_block');
  
  $page['page_bottom']['splash'] = array(
    '#attached' => array(),
  );
  $attached = &$page['page_bottom']['splash']['#attached'];
  $options = array('every_page' => TRUE, 'group' => JS_THEME);

  $attached['css'][$path . '/css/splash_block.css'] = $options;
  $attached['js'][$path . '/js/splash_block.js'] = $options;
  
  $splashes = array_values($page['splash']);
  // TODO --> This just takes the very first item, which sucks.... maybe redo with cookies.
  $splash = array_shift($splashes);
  unset($page['splash']);

  $bid = $splash['#block']->bid;
  $splash_block = _splash_block_get_settings($splash['#block']->module, $splash['#block']->delta);
  $time = isset($splash_block->time) ? (int) $splash_block->time : 20160;
  $time = $time * 60000;
  $size = isset($splash_block->size) ? (int) $splash_block->size : 20160;

  $page['page_bottom']['splash']['#markup'] = '<div id="splash-content"><div class="block" id="' . $bid . '">' . $splash['#markup'] . '</div></div>';

  // TODO --> add Drupal behavior.
  drupal_add_js(libraries_get_path('jstorage') . '/jstorage.min.js', array('group' => JS_THEME, 'every_page' => TRUE));
  drupal_add_js(drupal_get_path('module', 'splash_block') . '/js/jquery.json-2.3.min.js', array('group' => JS_THEME, 'every_page' => TRUE));
  drupal_add_js('
    jQuery(document).ready(function() {
      jQuery(window).load(function() {
        jQuery("#splash-content .block").each(
          function(index) {
            var id = jQuery(this).attr("id");
            var value = jQuery.jStorage.get(id);
            var ttl = jQuery.jStorage.getTTL(id);

            if(!value || ttl == 0){
              value = 1;

              var splash = jQuery(this).html();
              modal.open({content: splash, width: "' . $size . 'px"});

              jQuery.jStorage.set(id,value);
              jQuery.jStorage.setTTL(id,' . $time . ');
            }
          }
        );
        jQuery("#splash-content").remove();
      });
    });
  ', 'inline');
}